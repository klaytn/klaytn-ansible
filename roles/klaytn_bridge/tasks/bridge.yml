---
- name: "Run KEN to get parent KNI"
  shell:
    cmd: "{{ klaytn_service_type | regex_replace ('d') }} attach --datadir {{ klaytn_node_DATA_DIR }} --exec admin.nodeInfo.kni"
  register: kni_output
  become: yes
  when:
    - remoteNode|bool
    - isParent|bool

- name: "Get parent KNI"
  set_fact:
    kni: "{{ kni_output.stdout }}"
  when:
    - remoteNode|bool
    - isParent|bool

- name: "Generate main bridges json file"
  copy:
    content: "[{{ hostvars[inventory_hostname | regex_replace('CHILD', 'PARENT')]['kni'] }}]"
    dest: "{{ klaytn_node_DATA_DIR }}/main-bridges.json"
    force: yes
  become: yes
  when:
    - remoteNode|bool
    - not isParent|bool

- name: Get private IP
  shell: "hostname -I"
  register: hostname
  tags: "launchKgen"
  when:
    - remoteNode|bool

- name: Set private IP variable
  set_fact:
    privateIP: "{{ hostname.stdout | trim }}"
  when:
    - remoteNode|bool

- name: Modify main bridges json file
  replace:
    path: "{{ klaytn_node_DATA_DIR }}/main-bridges.json"
    regexp: "\\@\\[::\\]:32323"
    replace: "@{{ hostvars[inventory_hostname | regex_replace('CHILD', 'PARENT')]['privateIP'] }}:{{ parent_bridge_port }}"
  become: yes
  when:
    - remoteNode|bool
    - not isParent|bool

- name: Add bridge config to parent
  lineinfile:
    path: "/etc/{{ klaytn_service_type }}/conf/{{ klaytn_service_type }}.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: "yes"
  become: yes
  loop:
    - { regexp: '^SC_MAIN_BRIDGE=', line: 'SC_MAIN_BRIDGE=1' }
    - { regexp: '^SC_MAIN_BRIDGE_PORT=', line: 'SC_MAIN_BRIDGE_PORT={{ parent_bridge_port }}' }
    - { regexp: '^SC_MAIN_BRIDGE_INDEXING=', line: 'SC_MAIN_BRIDGE_INDEXING={{ parent_bridge_indexing }}' }
    - { regexp: '^(RPC_API=)(.*)$', line: '\1mainbridge,\2' }
    - { regexp: '^RPC_ENABLE=', line: 'RPC_ENABLE=1' }
  when:
    - remoteNode|bool
    - isParent|bool

- name: Add bridge config to child
  lineinfile:
    path: "/etc/{{ klaytn_service_type }}/conf/{{ klaytn_service_type }}.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: "yes"
  become: yes
  loop:
    - { regexp: '^SC_SUB_BRIDGE=', line: 'SC_SUB_BRIDGE=1' }
    - { regexp: '^SC_SUB_BRIDGE_PORT=', line: 'SC_SUB_BRIDGE_PORT={{ child_bridge_port }}' }
    - { regexp: '^SC_ANCHORING=', line: 'SC_ANCHORING=1' }
    - { regexp: '^SC_ANCHORING_PERIOD=', line: 'SC_ANCHORING_PERIOD=1' }
    - { regexp: '^(RPC_API=)(.*)$', line: '\1subbridge,\2' }
    - { regexp: '^RPC_ENABLE=', line: 'RPC_ENABLE=1' }
    - { regexp: '^SC_PARENT_CHAIN_ID=', line: 'SC_PARENT_CHAIN_ID={{ parent_chain_id }}' }
  when:
    - remoteNode|bool
    - not isParent|bool

- name: "Restart Klaytn serivce"
  systemd:
    name: "{{ klaytn_service_type }}"
    state: restarted
    enabled: yes
  become: yes
  when:
    - ansible_facts['pkg_mgr'] == 'yum'
    - remoteNode|bool

- name: "Run Klaytn"
  # Below command is to run Klaytn in background even after the shell opened by ansible is exited.
  command: "nohup /opt/{{ klaytn_service_type }}/bin/{{ klaytn_service_type }} start </dev/null >/dev/null 2>&1 &"
  become: yes
  when:
    - ansible_facts['pkg_mgr'] != 'yum'
    - remoteNode|bool

- name: "Wait until Klaytn is restarted"
  wait_for:
    path: /var/{{ klaytn_service_type }}/data/klay.ipc
  when:
    - remoteNode|bool
